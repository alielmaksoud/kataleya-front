{"ast":null,"code":"import _objectSpread from \"/home/ali/Documents/website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/ali/Documents/website/src/containers/Cart/ContactForm/ContactForm.js\";\nimport React, { Component } from 'react';\nimport './ContactForm.scss';\nimport axios from '../../../axios';\nimport { connect } from 'react-redux';\nimport ErrorHandler from '../../../hoc/ErrorHandler';\nimport * as actions from '../../../store/actions';\nimport { checkValidity } from '../../../shared/Validity';\nimport PropTypes from 'prop-types';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'number',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'E-mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          valid: true,\n          validation: {}\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = e => {\n      e.preventDefault();\n      const formData = {};\n\n      for (let formElementIndentifier in this.state.orderForm) {\n        formData[formElementIndentifier] = this.state.orderForm[formElementIndentifier].value;\n      }\n\n      const order = {\n        products: this.props.cartItems,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.purchaseOrder(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (e, inputIndentifier) => {\n      // clone of orderForm\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm); // clone each elements (name, street, ...)\n\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIndentifier]); // listener for each value of elements\n\n\n      updatedFormElement.value = e.target.value; // VALIDATION\n\n      updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      ; // change each element value in orderForm elements\n\n      updatedOrderForm[inputIndentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid\n      });\n    };\n  }\n\n  render() {\n    // convert object of objects into array of objects\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      // keys are name, street, ...\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    ;\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"contact-form\",\n      onSubmit: this.orderHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: \"Enter Your Contact Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: e => this.inputChangedHandler(e, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"dark\",\n        clicked: this.orderHandler,\n        disabled: !this.state.formIsValid,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 14\n      }, this);\n    }\n\n    return form;\n  }\n\n}\n\n;\nContactForm.propTypes = {\n  cartItems: PropTypes.array.isRequired,\n  price: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  token: PropTypes.string,\n  userId: PropTypes.string,\n  purchaseOrder: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.products.cart,\n    price: state.products.orderTotal,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    purchaseOrder: (orderData, token) => dispatch(actions.purchaseOrder(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorHandler(ContactForm, axios));","map":{"version":3,"sources":["/home/ali/Documents/website/src/containers/Cart/ContactForm/ContactForm.js"],"names":["React","Component","axios","connect","ErrorHandler","actions","checkValidity","PropTypes","Button","Spinner","Input","ContactForm","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","formElementIndentifier","order","products","props","cartItems","price","orderData","userId","purchaseOrder","token","inputChangedHandler","inputIndentifier","updatedOrderForm","updatedFormElement","target","inputIdentifier","setState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","propTypes","array","isRequired","number","bool","string","func","mapStateToProps","cart","orderTotal","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './ContactForm.scss';\nimport axios from '../../../axios';\nimport { connect } from 'react-redux';\nimport ErrorHandler from '../../../hoc/ErrorHandler';\nimport * as actions from '../../../store/actions';\nimport { checkValidity } from '../../../shared/Validity';\nimport PropTypes from 'prop-types';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactForm extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'number',\n          placeholder: 'ZIP Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'E-mail'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            { value: 'fastest', displayValue: 'Fastest' },\n            { value: 'cheapest', displayValue: 'Cheapest' },\n          ]\n        },\n        value: 'fastest',\n        valid: true,\n        validation: {}\n      },\n    },\n    formIsValid: false\n  };\n\n  orderHandler = (e) => {\n    e.preventDefault();\n\n    const formData = {};\n    for (let formElementIndentifier in this.state.orderForm) {\n      formData[formElementIndentifier] = this.state.orderForm[formElementIndentifier].value\n    }\n\n    const order = {\n      products: this.props.cartItems,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.purchaseOrder(order, this.props.token);\n  };\n\n  // ====== Immutably changind input values ======\n  inputChangedHandler = (e, inputIndentifier) => {\n    // clone of orderForm\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    // clone each elements (name, street, ...)\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIndentifier]\n    };\n\n    // listener for each value of elements\n    updatedFormElement.value = e.target.value;\n\n    // VALIDATION\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    };\n\n    // change each element value in orderForm elements\n    updatedOrderForm[inputIndentifier] = updatedFormElement;\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid\n    });\n  };\n\n  render() {\n    // convert object of objects into array of objects\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) { // keys are name, street, ...\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    };\n\n    let form = (\n      <form className=\"contact-form\" onSubmit={this.orderHandler}>\n        <h3 className=\"title\">Enter Your Contact Data</h3>\n        {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\" /> */}\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(e) => this.inputChangedHandler(e, formElement.id)}\n          />\n        ))}\n        <Button\n          btnType=\"dark\"\n          clicked={this.orderHandler}\n          disabled={!this.state.formIsValid}>Order</Button>\n      </form>\n    );\n\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n\n    return form;\n  }\n};\n\nContactForm.propTypes = {\n  cartItems: PropTypes.array.isRequired,\n  price: PropTypes.number.isRequired,\n  loading: PropTypes.bool.isRequired,\n  token: PropTypes.string,\n  userId: PropTypes.string,\n  purchaseOrder: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.products.cart,\n    price: state.products.orderTotal,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    purchaseOrder: (orderData, token) => dispatch(actions.purchaseOrder(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorHandler(ContactForm, axios));"]},"metadata":{},"sourceType":"module"}