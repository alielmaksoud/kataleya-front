{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken,\n    userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDTrZE1DWzMHeavsHSkGlSYr4dpBVqOlPY';\n\n    if (!isSignup) {\n      url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDTrZE1DWzMHeavsHSkGlSYr4dpBVqOlPY';\n    }\n\n    ;\n    axios.post(url, authData).then(res => {\n      // save login state in localStorage\n      const expirationDate = new Date(new Date().getTime() + res.data.expiresIn * 1000);\n      localStorage.setItem('token', res.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', res.data.localId);\n      dispatch(authSuccess(res.data.idToken, res.data.localId));\n      dispatch(checkAuthTimeout(res.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate')); // with new Date we can convert string(localStorage) into date object\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n\n      ;\n    }\n\n    ;\n  };\n};","map":{"version":3,"sources":["/home/ali/Documents/Kataleya-perfume/kataleya-front/website/src/store/actions/authActions.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","idToken","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","res","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","response","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","token","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (idToken, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken,\n    userId\n  };\n};\n\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDTrZE1DWzMHeavsHSkGlSYr4dpBVqOlPY';\n    if (!isSignup) {\n      url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDTrZE1DWzMHeavsHSkGlSYr4dpBVqOlPY'\n    };\n    axios.post(url, authData)\n      .then(res => {\n        // save login state in localStorage\n        const expirationDate = new Date(new Date().getTime() + res.data.expiresIn * 1000);\n        localStorage.setItem('token', res.data.idToken);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('userId', res.data.localId);\n\n        dispatch(authSuccess(res.data.idToken, res.data.localId));\n        dispatch(checkAuthTimeout(res.data.expiresIn));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data.error));\n      })\n  };\n};\n\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path\n  };\n};\n\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate')); // with new Date we can convert string(localStorage) into date object\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      };\n    };\n  };\n};"]},"metadata":{},"sourceType":"module"}