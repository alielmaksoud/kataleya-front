{"ast":null,"code":"import _objectSpread from \"/home/ali/Documents/Kataleya-perfume/kataleya-front/website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/ali/Documents/Kataleya-perfume/kataleya-front/website/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport './Auth.scss';\nimport * as actions from '../../store/actions';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/Validity';\nimport PropTypes from 'prop-types';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ScrollToTopOnMount from '../../shared/ScrollToTopOnMount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (e, controlName) => {\n      const updatedControls = _objectSpread(_objectSpread({}, this.state.controls), {}, {\n        // update only one input\n        [controlName]: _objectSpread(_objectSpread({}, this.state.controls[controlName]), {}, {\n          value: e.target.value,\n          valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          loading = _this$props.loading,\n          error = _this$props.error,\n          isAuth = _this$props.isAuth;\n    const _this$state = this.state,\n          controls = _this$state.controls,\n          isSignup = _this$state.isSignup; // convert object of objects into array of objects\n\n    const formElementsArray = [];\n\n    for (let key in controls) {\n      formElementsArray.push({\n        id: key,\n        config: controls[key]\n      });\n    }\n\n    ;\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: e => this.inputChangedHandler(e, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)); // Display Spinner\n\n    if (loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }, this);\n    }\n\n    ; // Display Firebase Error Message\n\n    let errorMessage = null;\n\n    if (error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this);\n    }\n\n    ; // redirect after signin/login\n\n    let authRedirect = null;\n\n    if (isAuth) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 22\n      }, this);\n    }\n\n    ;\n\n    let title = /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"auth-title\",\n      children: \"You don't have an account yet? Create them below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this);\n\n    if (!isSignup) title = /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"auth-title\",\n      children: \"Do you already have an account? Log in below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 28\n    }, this);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ScrollToTopOnMount, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-container\",\n        children: [title, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switch\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            clicked: this.switchAuthModeHandler,\n            btnType: \"dark\",\n            children: [\"SWITCH TO \", isSignup ? 'SINGIN' : 'SIGNUP']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [form, /*#__PURE__*/_jsxDEV(Button, {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\n;\nAuth.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.object,\n  isAuth: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/ali/Documents/Kataleya-perfume/kataleya-front/website/src/containers/Auth/Auth.js"],"names":["React","Component","actions","connect","Redirect","checkValidity","PropTypes","Input","Button","Spinner","ScrollToTopOnMount","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","e","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","render","loading","error","isAuth","formElementsArray","key","push","id","config","form","map","formElement","errorMessage","message","authRedirect","title","propTypes","bool","isRequired","object","func","mapStateToProps","auth","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Auth.scss';\nimport * as actions from '../../store/actions';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/Validity';\nimport PropTypes from 'prop-types';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ScrollToTopOnMount from '../../shared/ScrollToTopOnMount';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    isSignup: true\n  };\n\n  inputChangedHandler = (e, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n\n      // update only one input\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: e.target.value,\n        valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\n        touched: true\n      }\n    };\n\n    this.setState({\n      controls: updatedControls\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignup: !prevState.isSignup\n      };\n    });\n  };\n\n  render() {\n    const { loading, error, isAuth } = this.props;\n    const { controls, isSignup } = this.state;\n\n    // convert object of objects into array of objects\n    const formElementsArray = [];\n    for (let key in controls) {\n      formElementsArray.push({\n        id: key,\n        config: controls[key]\n      });\n    };\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(e) => this.inputChangedHandler(e, formElement.id)}\n      />\n    ));\n\n    // Display Spinner\n    if (loading) {\n      form = <Spinner />\n    };\n\n    // Display Firebase Error Message\n    let errorMessage = null;\n    if (error) {\n      errorMessage = (\n        <p>{error.message}</p>\n      )\n    };\n\n    // redirect after signin/login\n    let authRedirect = null;\n    if (isAuth) {\n      authRedirect = <Redirect to=\"/\" />\n    };\n\n    let title = <h1 className=\"auth-title\">You don't have an account yet? Create them below.</h1>\n    if (!isSignup) title = <h1 className=\"auth-title\">Do you already have an account? Log in below.</h1>;\n\n    return (\n      <>\n        <ScrollToTopOnMount />\n        <div className=\"auth-container\">\n          {title}\n          <div className=\"switch\">\n            <Button\n              clicked={this.switchAuthModeHandler}\n              btnType=\"dark\">SWITCH TO {isSignup ? 'SINGIN' : 'SIGNUP'}</Button>\n          </div>\n          {authRedirect}\n          {errorMessage}\n          <form onSubmit={this.submitHandler}>\n            {form}\n            <Button>Submit</Button>\n          </form>\n        </div>\n      </>\n    );\n  }\n};\n\nAuth.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.object,\n  isAuth: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}